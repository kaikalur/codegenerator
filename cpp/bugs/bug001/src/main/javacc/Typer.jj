options {
  STATIC=false;
  DEBUG_PARSER=true;
  DEBUG_LOOKAHEAD=true;
  NAMESPACE="bug001";
  OUTPUT_LANGUAGE = "c++";
}
PARSER_BEGIN(Bug001Parser)
class BugParser {
};
PARSER_END(Bug001Parser)

SKIP 					: { " " | "\t" | "\n" | "\r" }

TOKEN 					:
{ <DBLLBRACKET			: "[[">
| <CTAG					: "/>">
| <ETAG					: "</">
| <LBRACKET 			: "["> 
| <RBRACKET 			: "]">
| <LBRACE 				: "{">
| <RBRACE 				: "}">
| <LPAREN 				: "(">
| <RPAREN 				: ")">
| <CIRCONFLEX 			: "^">
| <VERTICAL				: "|">
| <COMMA				: ",">
| <LESS					: "<">
| <GREATER				: ">">
| <ASSIGN				: "::=">
| <EXCLAMATION			: "!">
| <AMPERSAND			: "&">
| <ASTERISK				: "*">
| <SLASH				: "/">
| <HYPHEN				: "-">
| <COLON				: ":">
| <SEMICOLON			: ";">
| <DOT					: ".">
| <DOTDOT				: "..">
| <DOTDOTDOT			: "...">
| <ARROBASE				: "@">
| <ARROBASEDOT			: "@.">
}

void DefinitiveIdentifier()  : {}  {
	<LBRACE> DefinitiveObjIdComponentList() <RBRACE>
}
void DefinitiveObjIdComponentList()  : {}
{
	DefinitiveObjIdComponent() (DefinitiveObjIdComponent())*
}
void DefinitiveObjIdComponent() : 
{  }  {
 	LOOKAHEAD(2)
    DefinitiveNameAndNumberForm()
| 	DefinitiveNumberForm()
| 	DefinitiveNameForm()
}
void DefinitiveNumberForm() : 
{ }
{
  number()
}
void DefinitiveNameAndNumberForm()  :
{}
{
  identifier() <LPAREN> DefinitiveNumberForm() <RPAREN>
}
void DefinitiveNameForm()  		: 
{ }
{
	( identifier()	
	| valuereference()
	) 
}
void number() : 
{ }
{
	<NUMBER>
}
void identifier() 					    	: {} { <IDENTIFIANT> }
void valuereference() 					    : {} { <VALUEREFERENCE> }
TOKEN : 
{
  < #UPPER				: ["A"-"Z"]>
| < #LOWER				: ["a"-"z"]>
| < #DIGIT				: ["0"-"9"]>
| < #QUOTE				: "\"" >
| < #DOUBLEDQUOTE		: "\"\"" >
| <BSTRING				: "'" (["0"-"1"])* "'B">
| <HSTRING				: "'" (<DIGIT>|["A"-"F"]|["a"-"f"])* "'H">
| <CSTRING				: <QUOTE> (~["\""] | <DOUBLEDQUOTE> )* <QUOTE> > 
| <NUMBER				: ("0" | ["1"-"9"](<DIGIT>)*)>
| <FLOAT				: <NUMBER>"."<NUMBER>>
| <#LOWERCASEFIRSTREF	: "&"<LOWERCASEFIRST>>
| <#UPPERCASEFIRSTREF	: "&"<UPPERCASEFIRST>>
// <#UPPERCASE			: <UPPER>("-" <UPPER>|<UPPER>)*>
| <#UPPERCASEDIGIT		: <UPPER>("-"(<UPPER>|<DIGIT>)|(<UPPER>|<DIGIT>))*>
| <#LOWERCASEFIRST		: <LOWER>("-"(<LOWER>|<UPPER>|<DIGIT>)|(<LOWER>|<UPPER>|<DIGIT>))*>
| <#UPPERCASEFIRST		: <UPPER>("-"(<LOWER>|<UPPER>|<DIGIT>)|(<LOWER>|<UPPER>|<DIGIT>))*>
}
TOKEN:
{
	<IDENTIFIANT						: <LOWERCASEFIRST>>
|	<VALUEREFERENCE						: <LOWERCASEFIRST>>
}