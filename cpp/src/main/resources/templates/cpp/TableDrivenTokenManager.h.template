\#ifndef JAVACC_${parserName}_TOKEN_MANAGER_H
\#define JAVACC_${parserName}_TOKEN_MANAGER_H

\#include "JavaCC.h"
\#include "CharStream.h"
#if tokenInclude
\#include "${tokenInclude}"
#fi
\#include "ErrorHandler.h"
\#include "TokenManager.h"
\#include "${parserName}Constants.h"


#if TOKEN_MANAGER_USES_PARSER
\#include "${parserName}.h"
#fi

#if NAMESPACE
namespace ${NAMESPACE_OPEN}
#fi

class ${parserName}TokenManager 
	: public TokenManager
 {
public:
\#ifndef JAVACC_CHARSTREAM
\#define JAVACC_CHARSTREAM CharStream
\#endif

private:
  int defaultLexState;
  int curLexState = ${defaultLexState};
  int jjmatchedPos;
  int jjmatchedKind;

  int moveIndex;
  unsigned long long        jjChars[${nfaSize}][${charsVectorSize}];
    
  JJString                  jjimage;
  JJString                  image = jjimage;
  int                       jjimageLen;
  int                       lengthOfMatch;
  JJChar                    curChar;
  JAVACC_CHARSTREAM*        input_stream;

  int                       jjrounds[${stateSetSize}];
  int                       jjstateSet[2 * ${stateSetSize}];
  TokenManagerErrorHandler* errorHandler;
  bool 						delete_eh;

public: 
  ${parserName}TokenManager(JAVACC_CHARSTREAM* stream, int lexState = 0);
  virtual ~${parserName}TokenManager() {}

  Token* getNextToken();

#if COMMON_TOKEN_ACTION
  void CommonTokenAction(Token* token);
#fi

#if TOKEN_MANAGER_USES_PARSER
public:
  void   setParser(void* parser);
protected:	
  ${parserName}*   parser;
#fi
protected:
  bool   moveToNextChar();
  
  void   ReInit(JAVACC_CHARSTREAM* stream, int lexState = 0);
  void   SwitchTo(int lexState);


private:
  void   tokenLexicalActions(Token* matchedToken);
  void   skipLexicalActions(const Token* matchedToken);
  void   moreLexicalActions();

  int    getStartAndSize(int index, int isCount);
  int    jjRunStringLiteralMatch();

  int    jjMoveNfa(int startState, int curPos);
  Token* jjFillToken();

public:
  void   lexicalError();
  void   setErrorHandler(TokenManagerErrorHandler* eh);
};

#if NAMESPACE
${NAMESPACE_CLOSE}
#fi

\#endif
