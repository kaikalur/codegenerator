\#ifndef JAVACC_${parserName}TokenManager_H
\#define JAVACC_${parserName}TokenManager_H

\#include "stdio.h"
\#include "JavaCC.h"
\#include "CharStream.h"
\#include "Token.h"
\#include "ErrorHandler.h"
\#include "TokenManager.h"
\#include "${parserName}Constants.h"
#if TOKEN_MANAGER_USES_PARSER
\#include "${parserName}.h"
#fi

#if NAMESPACE
namespace ${NAMESPACE_OPEN}
#fi
class ${parserName};

class ${parserName}TokenManager : public TokenManager {
public:
\#ifndef JAVACC_CHARSTREAM
\#define JAVACC_CHARSTREAM CharStream
\#endif

private:
  int defaultLexState;
  int curLexState = ${defaultLexState};
  int jjmatchedPos;
  int jjmatchedKind;

  int stateSet[${generatedStates}];
  int newStateSet[${generatedStates}];
  int moved[${generatedStates}];
  int moveIndex;
  unsigned long long jjChars[${nfaSize}][${charsVectorSize}];
    
  JJString                  jjimage;
  JJString                  image = jjimage;
  int                       jjimageLen;
  int                       lengthOfMatch;
  JJChar                    curChar;
  JAVACC_CHARSTREAM       * input_stream;

  int                       jjrounds[${stateSetSize}];
  int                       jjstateSet[2 * ${stateSetSize}];
  TokenManagerErrorHandler* errorHandler;
  bool 						delete_eh;

public: 
#if TOKEN_MANAGER_USES_PARSER && !STATIC
  ${parserName}TokenManager(${parserName} parserArg, JAVACC_CHARSTREAM * stream, int lexState = 0);
#else
  ${parserName}TokenManager(JAVACC_CHARSTREAM * stream, int lexState = 0);
#fi
  virtual ~${parserName}TokenManager() {}

  Token * getNextToken();

protected:
  bool moveToNextChar();
  
#if TOKEN_MANAGER_USES_PARSER
  void ReInit( ${parserName} parserArg, JAVACC_CHARSTREAM * stream, int lexState = 0);
#else
  void ReInit(JAVACC_CHARSTREAM * stream, int lexState = 0);
#fi

  void SwitchTo(int lexState);


private:
  void TokenLexicalActions(Token * matchedToken);
  void SkipLexicalActions(Token * matchedToken);
  void MoreLexicalActions();

  int getStartAndSize(int index, int isCount);
  int jjRunStringLiteralMatch();

  int jjMoveNfa(int startState, int curPos);
  Token * jjFillToken();

public:
  void setErrorHandler(TokenManagerErrorHandler *eh) {
      if (delete_eh) delete errorHandler, errorHandler = nullptr;
      delete_eh = false;  // We don't delete stuff passed in.
      errorHandler = eh;
  }
};

#if NAMESPACE
${NAMESPACE_CLOSE}
#fi

\#endif
