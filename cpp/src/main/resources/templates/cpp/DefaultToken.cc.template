#if NAMESPACE
namespace ${NAMESPACE_OPEN}
#fi

  DefaultToken::DefaultToken() :
  	_beginLine(0), _beginColumn(0), _endLine(0), _endColumn(0)
  {
    this->_kind = 0;
    this->_next = nullptr;
    this->_specialToken = nullptr;
  }

  DefaultToken::DefaultToken(int kind) :
  	_beginLine(0), _beginColumn(0), _endLine(0), _endColumn(0) 
  {
    this->_kind = kind;
    this->_next = nullptr;
    this->_specialToken = nullptr;
  }

  DefaultToken::DefaultToken(int kind, const JJString& image)
  	: _beginLine(0), _beginColumn(0), _endLine(0), _endColumn(0) 
  {
    this->_kind = kind;
    this->_image = image;
    this->_next = nullptr;
    this->_specialToken = nullptr;
  }

  Token* DefaultToken::newToken(int kind, const JJString& image)
  {
    switch(kind)
    {
      default : return new DefaultToken(kind, image);
    }
  }

  Token* DefaultToken::newToken(int kind)
  {
    return newToken(kind, JJString());
  }

  DefaultToken::~DefaultToken() {
    if (_specialToken) delete _specialToken;
    this->_kind = 0;
    this->_next = nullptr;
    this->_specialToken = nullptr;
  }

  int& 				DefaultToken::kind()				{ return _kind; }
  int& 				DefaultToken::beginLine()			{ return _beginLine; }	
  int& 				DefaultToken::beginColumn()			{ return _beginColumn; }
  int& 				DefaultToken::endLine()				{ return _endLine; }
  int& 				DefaultToken::endColumn()			{ return _endColumn; }
  JJString& 		DefaultToken::image()				{ return _image; }
  Token*& 			DefaultToken::next()				{ return _next; }
  Token*& 			DefaultToken::specialToken()		{ return _specialToken; }
  
  const int& 		DefaultToken::kind() const 			{ return _kind; }
  const int& 		DefaultToken::beginLine() const		{ return _beginLine; }
  const int& 		DefaultToken::beginColumn() const	{ return _beginColumn; }
  const int& 		DefaultToken::endLine() const		{ return _endLine; }
  const int& 		DefaultToken::endColumn() const		{ return _endColumn; }
  const JJString& 	DefaultToken::image() const			{ return _image; }
  const Token* 		DefaultToken::next() const			{ return _next; }
  const Token*	 	DefaultToken::specialToken() const	{ return _specialToken; }

  const JJString& 	DefaultToken::toString()			{ return _image; }

  void*& 			DefaultToken::value() 				{ return _value; }
  const void* 		DefaultToken::value() const  		{ return _value; }

#if NAMESPACE
${NAMESPACE_CLOSE}
#fi
