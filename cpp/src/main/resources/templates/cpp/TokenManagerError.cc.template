#if NAMESPACE
namespace ${NAMESPACE_OPEN}
#fi

  /**
   * Returns a detailed message for the Error when it is thrown by the
   * token manager to indicate a lexical error.
   * Parameters :
   *    EOFSeen     : indicates if EOF caused the lexical error
   *    curLexState : lexical state in which this error occurred
   *    errorLine   : line number when the error occurred
   *    errorColumn : column number when the error occurred
   *    errorAfter  : prefix that was seen before this error occurred
   *    curJJChar     : the offending character
   * Note: You can customize the lexical error message by modifying this method.
   */
    JJString TokenManagerError::LexicalError(bool EOFSeen, int lexState, int errorLine, int errorColumn, const JJString & errorAfte, JJChar curChar) {
\#if 0
    JJString s;
    stringstream<JJString> ss;
    ss << "Lexical error at line " << errorLine << " column " << errorColumn
       << ".  Encountered: " << curChar << "(" << (int)curChar
       << ") after : \"" << errorAfter.c_str() << "\"";
    return (JJString)ss.rdbuf()->str();
\#endif
    return JJEMPTY;
  }

  /**
   * You can also modify the body of this method to customize your error messages.
   * For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not
   * of end-users concern, so you can return something like :
   *
   *     "Internal Error : Please file a bug report .... "
   *
   * from this method for such cases in the release version of your parser.
   */
  JJString TokenManagerError::getMessage() {
    return message;
  }

  TokenManagerError::TokenManagerError() {
  }
  TokenManagerError::TokenManagerError(const JJString & message, int reason) {
    errorCode = reason;
  }
  TokenManagerError::TokenManagerError(bool EOFSeen, int lexState, int errorLine, int errorColumn, const JJString& errorAfter, JJChar curChar, int reason) {
    message = LexicalError(EOFSeen, lexState, errorLine, errorColumn, errorAfter, curChar);
   errorCode = reason;
  }
  TokenManagerError::~TokenManagerError() { 
  }

// i < 16 - guaranteed
char hexChar(int i) {
  if (i < 10) {
    return i + '0';
  }
  return 'a' + (i - 10);
}

/**
 * Replaces unprintable characters by their escaped (or unicode escaped)
 * equivalents in the given string
 */
\#if (JAVACC_CHAR_TYPE_SIZEOF == 1)
\#define JJB "\\b"
\#define JJT "\\t"
\#define JJN "\\n"
\#define JJF "\\f"
\#define JJR "\\r"
\#define JJS "\\\\"
\#define JJU "\\u"
\#define JJM 0xff
\#else
\#define JJB L"\\b"
\#define JJT L"\\t"
\#define JJN L"\\n"
\#define JJF L"\\f"
\#define JJR L"\\r"
\#define JJS L"\\\\"
\#define JJU L"\\u"
\#define JJM 0xffff
\#endif
JJString addUnicodeEscapes(const JJString& str) {
  JJString retval;
  for (size_t i = 0; i < str.size(); i++) {
    JJChar ch = str[i];
    switch (ch)
    {
      case '\b':
        retval.append(JJB);
        continue;
      case '\t':
        retval.append(JJT);
        continue;
      case '\n':
        retval.append(JJN);
        continue;
      case '\f':
        retval.append(JJF);
        continue;
      case '\r':
        retval.append(JJR);
        continue;
      case '\\':
        retval.append(JJS);
        continue;
      default:
        if (ch < JJM) {
          retval += ch;
          continue;
        }
        retval.append(JJU);
        retval += (hexChar(ch >> 12));
        retval += (hexChar((ch & 0x0f00) >> 8));
        retval += (hexChar((ch & 0x00f0) >> 4));
        retval += (hexChar(ch & 0x000f));
        continue;
    }
  }
  return retval;
}
\#undef JJB
\#undef JJT
\#undef JJN
\#undef JJF
\#undef JJR
\#undef JJS
\#undef JJU
\#undef JJM

#if NAMESPACE
${NAMESPACE_CLOSE}
#fi
