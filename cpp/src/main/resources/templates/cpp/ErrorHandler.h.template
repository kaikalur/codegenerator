\#ifndef JAVACC_ERROR_HANDLER_H
\#define JAVACC_ERROR_HANDLER_H

\#include "JavaCC.h"
\#include "Token.h"

namespace JavaCC {

#if BUILD_PARSER
//  class ${PARSER_NAME};
class ErrorHandler {
//  friend class ${PARSER_NAME}TokenManager;
//  friend class ${PARSER_NAME};
public:
             ErrorHandler() {}
    virtual ~ErrorHandler() {}
      
  // Called when the parser encounters a different token when expecting to consume a specific kind of token.
  // expectedKind  - token kind that the parser was trying to consume.
  // expectedToken - the image of the token - tokenImages[expectedKind].
  // actual        - the actual token that the parser got instead.
  virtual void handleUnexpectedToken(int expectedKind, const JJString& expectedImage, const JJString& expectedLabel, const Token* actual) = 0;
      
      
  // Called when the parser cannot continue parsing.
  // last         - the last token successfully parsed.
  // unexpected   - the token at which the error occurs.
  // production   - the production in which this error occurs.
  virtual void handleParseError(const Token* last, const Token* unexpected, const JJSimpleString& production) = 0;
  virtual void handleOtherError(const JJString& message) = 0;
  virtual int  getErrorCount() const { return error_count; }

protected:
  int error_count = 0;
      
};
#fi

#if BUILD_TOKEN_MANAGER
//  class ${PARSER_NAME}TokenManager;
class TokenManagerErrorHandler {
//  friend class ${PARSER_NAME}TokenManager;
public:
  virtual ~TokenManagerErrorHandler() {}
    
public:
  // Returns a detailed message for the Error when it is thrown by the
  // token manager to indicate a lexical error.
  // Parameters :
  //    EOFSeen     : indicates if EOF caused the lexical error
  //    curLexState : lexical state in which this error occurred
  //    errorLine   : line number when the error occurred
  //    errorColumn : column number when the error occurred
  //    errorAfter  : prefix that was seen before this error occurred
  //    curchar     : the offending character
  //
  virtual void lexicalError(bool EOFSeen, int lexState, int errorLine, int errorColumn, JJString errorAfter, JJChar curChar) = 0;
  virtual void lexicalError(const JJString& errorMessage) = 0;
  virtual int  getErrorCount() const { return error_count; }

protected:
  int error_count = 0;
};
#fi

}
#if BUILD_PARSER
using JavaCC::ErrorHandler;
#fi
#if BUILD_TOKEN_MANAGER
using JavaCC::TokenManagerErrorHandler;
#fi

\#endif
